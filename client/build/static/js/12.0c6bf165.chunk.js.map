{"version":3,"sources":["apis/user-api.js","components/HeaderLabel.js","components/Table.js","pages/UserTickets.js"],"names":["getUsersByRole","role","a","axios","get","then","res","catch","err","console","log","response","getUserProjects","userId","getUserTickets","getAllUsers","getUser","updateUser","userUpdates","patch","useStyles","makeStyles","theme","span","borderRadius","backgroundColor","boxShadow","padding","HeaderLabel","text","classes","variant","component","className","paper","hover","selected","BasicTable","loading","handleSelect","title","data","dense","rowKey","tableHeight","emptyTableText","Error","useState","page","setPage","rowsPerPage","setRowsPerPage","rows","JSON","parse","stringify","forEach","row","_id","style","minHeight","maxHeight","table","aria-label","size","components","Object","keys","map","key","index","titleCaseKey","charAt","toUpperCase","slice","align","onClick","event","rowId","scope","border","length","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","target","value","root","flexGrow","spacing","textAlign","color","palette","secondary","link","textDecoration","formControl","display","margin","minWidth","button","CenteredGrid","match","selectedTicketId","setSelectedTicketId","useContext","Context","store","tickets","setTickets","ticketsLoading","setTicketsLoading","useEffect","ticketData","container","item","xs","md","name","to","fullWidth","disabled"],"mappings":"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","file":"static/js/12.0c6bf165.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n/**\r\n * Sends an api request to get a list of users by role.\r\n * @param {string} role - The desired \"role\" field to filter users by.\r\n * @returns Server response containing a list of users filtered by role.\r\n */\r\nconst getUsersByRole = async (role) => {\r\n    const response = await axios.get(`/api/users/${role}`)\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n\r\n    return response\r\n}\r\n\r\n/**\r\n * Sends an api request to retrieve a user's projects.\r\n * @param {string} userId - The \"_id\" field of the requested user\r\n * @returns Server response containing list of projects where the user is in the team, the assigned dev, or submitter.\r\n */\r\nconst getUserProjects = async (userId) => {\r\n    const response = await axios.get(`/api/users/${userId}/projects`)\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n\r\n    return response\r\n}\r\n\r\n/**\r\n * Sends an api request to return relevant tickets to the user.\r\n * @param {string} userId - The \"_id\" field of the user\r\n * @returns Server response containing an array of the users tickets.\r\n */\r\nconst getUserTickets = async (userId) => {\r\n    const response = await axios.get(`/api/users/${userId}/tickets`)\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n\r\n    return response\r\n}\r\n\r\n/**\r\n * Sends an api request to get all users in the database.\r\n * @returns Server response returning an array containing user objects of all users.\r\n */\r\nconst getAllUsers = async () => {\r\n    const response = await axios.get(`/api/users`)\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n\r\n    return response\r\n}\r\n\r\n/**\r\n * Sends an api request to retrieve a user object.\r\n * @param {string} userId - The \"_id\" field of the user to retrieve.\r\n * @returns Server response containing the user object\r\n */\r\nconst getUser = async (userId) => {\r\n    const response = await axios.get(`/api/users/user/${userId}`)\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n    return response\r\n}\r\n\r\n/**\r\n * Send an api request that will update a user's values.\r\n * @param {string} userId - The \"_id\" field of the user to update\r\n * @param {object} userUpdates - Object containing new user values\r\n * @returns \r\n */\r\nconst updateUser = async (userId, userUpdates) => {\r\n    const response = await axios.patch(`/api/users/user/${userId}`, userUpdates)\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n    return response\r\n}\r\n\r\n\r\n\r\nexport {\r\n    getUsersByRole,\r\n    getUserProjects,\r\n    getUserTickets,\r\n    getAllUsers,\r\n    getUser,\r\n    updateUser,\r\n}","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Typography } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    span: {\r\n        borderRadius: '3px',\r\n        backgroundColor: '#00adb5',\r\n        boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n        padding: '.4rem',\r\n\r\n    },\r\n}))\r\n\r\n\r\nconst HeaderLabel = ({ text }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <Typography variant='h3' component='span' className={classes.span}>\r\n           {text}\r\n        </Typography>\r\n    )\r\n}\r\n\r\nexport default HeaderLabel","import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { Typography } from '@material-ui/core'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n    },\r\n    hover: {\r\n        \"&:hover\": {\r\n            backgroundColor: \"#0899ba !important\"\r\n        }\r\n\r\n    },\r\n    selected: {\r\n        backgroundColor: \"#607d8b !important\"\r\n    },\r\n\r\n    span: {\r\n        padding: '1rem',\r\n    }\r\n})\r\n\r\nexport default function BasicTable({ loading, selected, handleSelect, title, data, hover, dense, rowKey, tableHeight, emptyTableText }) {\r\n\r\n    /**\r\n     * Handle cases where a table does not need a select function.\r\n     * Throw an error when key and height are not specified\r\n     */\r\n    if (!handleSelect) {\r\n        handleSelect = () => undefined\r\n    }\r\n    if (!rowKey) {\r\n        throw new Error('Component prop \"rowKey\" is not defined')\r\n    }\r\n    if (!tableHeight) {\r\n        throw new Error('Component prop \"tableHeight\" is not defined')\r\n    }\r\n\r\n    /**\r\n     * Styling\r\n     */\r\n    const classes = useStyles()\r\n\r\n    /**\r\n     * States used to manage the pages and rows displayed on a table\r\n     */\r\n    const [page, setPage] = useState(0)\r\n    const [rowsPerPage, setRowsPerPage] = useState(5)\r\n\r\n    /**\r\n     * Function to handle page changing in the table component.\r\n     * @param {object} event - Capture the event object\r\n     * @param {number} newPage - The number of the new page.\r\n     */\r\n    const handleChangePage = (event, newPage) => {\r\n        console.log(typeof newPage)\r\n        setPage(newPage)\r\n    }\r\n\r\n    /**\r\n     * Modifies the table component to handle the requested rows per page\r\n     * @param {object} event - Capture the event object.\r\n     */\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value)\r\n        setPage(0)\r\n    }\r\n\r\n    /**\r\n     * Determines if the ID selected is the the ID of the current row.\r\n     * @param {string} rowId - The rowId to be compared to the selectedId\r\n     * @returns True if the selected objects Id matches the rowId\r\n     */\r\n    const isSelected = rowId => selected === rowId\r\n\r\n    /**\r\n     * Deep copy the table data and remove the \"_id\" field to avoid it being\r\n     * displayed in the table.\r\n     */\r\n    const rows = JSON.parse(JSON.stringify(data))\r\n\r\n    rows.forEach(row => delete row._id)\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <Typography variant='h4' component='span' className={classes.span}>\r\n                {title}\r\n            </Typography>\r\n            <TableContainer style={{ minHeight: tableHeight, maxHeight: tableHeight }}>\r\n                <Table\r\n                    className={classes.table}\r\n                    aria-label=\"simple table\"\r\n                    size={dense ? 'small' : 'medium'}\r\n                    components={{\r\n                    }}\r\n                >\r\n                    <TableHead>\r\n                        <TableRow>\r\n\r\n                            {/* Uses the first object in the array to create the table header */}\r\n                            {\r\n                                rows[0] &&\r\n                                Object.keys(rows[0]).map((key, index) => {\r\n                                    const titleCaseKey = key.charAt(0).toUpperCase() + key.slice(1)\r\n                                    if (index === 0) {\r\n                                        return <TableCell key={key + ' ' + index}>{titleCaseKey}</TableCell>\r\n                                    } else {\r\n                                        return <TableCell key={key + ' ' + index} align=\"center\">{titleCaseKey}</TableCell>\r\n                                    }\r\n\r\n                                })\r\n                            }\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n\r\n                        {/* Maps the data to the table */}\r\n                        {\r\n                            rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => (\r\n                                <TableRow\r\n                                    classes={{ hover: classes.hover, selected: classes.selected }}\r\n                                    hover={hover}\r\n                                    key={row[rowKey] + ' ' + index}\r\n                                    onClick={(event) => {\r\n                                        handleSelect(event, data[index]._id)\r\n                                    }}\r\n                                    selected={hover && isSelected(data[index]._id)}\r\n                                >\r\n                                    {\r\n                                        Object.keys(row).map((key, index) => {\r\n                                            if (index === 0) {\r\n                                                return <TableCell key={key + ' ' + index} component=\"th\" scope=\"row\">\r\n                                                    {row[key]}\r\n                                                </TableCell>\r\n                                            } else {\r\n                                                return <TableCell key={key + ' ' + index} align=\"center\">{row[key]}</TableCell>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </TableRow>\r\n                            ))\r\n                        }\r\n\r\n                        {/* Display spinner when data is loading */}\r\n                        {\r\n                            loading &&\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" style={{ border: 'none' }}>\r\n                                    <CircularProgress size='8.5rem' />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        }\r\n\r\n                        {/* Displays text when table is empty and not loading */}\r\n                        {\r\n                            (!rows.length && !loading) &&\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" style={{ border: 'none' }}>\r\n                                    <Typography variant='h4' className={classes.span}>\r\n                                        {emptyTableText}\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[5, 25, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper >\r\n    )\r\n}\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Table from '../components/Table'\r\nimport { getUserTickets } from '../apis/user-api'\r\nimport HeaderLabel from '../components/HeaderLabel'\r\nimport { Link } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport { Context } from '../global/Store'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n\r\n    },\r\n    link: {\r\n        color: 'inherit',\r\n        textDecoration: 'none',\r\n    },\r\n    span: {\r\n        borderRadius: '3px',\r\n        backgroundColor: '#00adb5',\r\n        boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n        padding: '.4rem',\r\n\r\n    },\r\n    formControl: {\r\n        display: 'inline-block',\r\n        margin: theme.spacing(1),\r\n        minWidth: 100,\r\n    },\r\n    button: {\r\n\r\n    }\r\n}))\r\n\r\nexport default function CenteredGrid({ match }) {\r\n    const classes = useStyles()\r\n\r\n    const [selectedTicketId, setSelectedTicketId] = useState('')\r\n    const [store] = useContext(Context)\r\n    const [tickets, setTickets] = useState([])\r\n    const [ticketsLoading, setTicketsLoading] = useState(false)\r\n\r\n    /**\r\n     * Loads tickets relevant to the user into a table.\r\n     */\r\n    useEffect(() => {\r\n        setTicketsLoading(true)\r\n        getUserTickets(store.userId)\r\n            .then(res => {\r\n                const ticketData = res.data.tickets\r\n                setTickets(ticketData)\r\n                setTicketsLoading(false)\r\n            })\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n\r\n    /**\r\n     * Handles the selection of a ticket in the table.\r\n     * @param {object} event - Captures the event.\r\n     * @param {string} name - The \"_id\" field of the ticket to be selected.\r\n     */\r\n    const handleSelect = (event, name) => {\r\n        if (selectedTicketId === name) {\r\n            setSelectedTicketId('')\r\n        } else {\r\n            setSelectedTicketId(name)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <HeaderLabel text='My Tickets' />\r\n                </Grid>\r\n\r\n                <Grid item md={12} xs={12}>\r\n                    <Table\r\n                        emptyTableText='You currently have no tickets'\r\n                        tableHeight='60vh'\r\n                        loading={ticketsLoading}\r\n                        selected={selectedTicketId}\r\n                        handleSelect={handleSelect}\r\n                        title='Tickets'\r\n                        data={tickets}\r\n                        hover={true}\r\n                        dense={false}\r\n                        rowKey='title'\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Link to={`/dashboard/projects/ticket/${selectedTicketId}`} className={classes.link}>\r\n                        <Button variant='contained' color='primary' fullWidth disabled={!selectedTicketId}>\r\n                            Ticket Details\r\n                        </Button>\r\n                    </Link>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}
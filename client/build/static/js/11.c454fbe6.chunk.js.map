{"version":3,"sources":["apis/user-api.js","components/HeaderLabel.js","components/Table.js","pages/AdminRoles.js"],"names":["getUsersByRole","role","a","axios","get","then","res","catch","err","console","log","response","getUserProjects","userId","cancelToken","getUserTickets","getAllUsers","getUser","updateUser","userUpdates","patch","useStyles","makeStyles","theme","span","borderRadius","backgroundColor","boxShadow","padding","HeaderLabel","text","classes","variant","component","className","paper","hover","selected","BasicTable","loading","handleSelect","title","data","dense","rowKey","tableHeight","emptyTableText","Error","useState","page","setPage","rowsPerPage","setRowsPerPage","rows","JSON","parse","stringify","forEach","row","_id","style","minHeight","maxHeight","table","aria-label","size","components","Object","keys","map","key","index","titleCaseKey","charAt","toUpperCase","slice","align","onClick","event","rowId","scope","border","length","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","target","value","root","flexGrow","spacing","textAlign","color","palette","secondary","link","textDecoration","formControl","display","margin","minWidth","button","AdminRoles","selectedUserId","setSelectedUserId","users","setAllUsers","usersLoading","setUsersLoading","setRole","useContext","Context","store","dispatch","useEffect","source","CancelToken","token","userList","cancel","container","item","xs","isDemoUser","md","id","user","find","Paper","name","width","disabled","labelId","onChange","e","newRole","snackbarPayload","snackbarText","snackbarSeverity","finally","type","OPENSNACKBAR","handleRoleChange","fullWidth"],"mappings":"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","file":"static/js/11.c454fbe6.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n/**\r\n * Sends an api request to get a list of users by role.\r\n * @param {string} role - The desired \"role\" field to filter users by.\r\n * @returns Server response containing a list of users filtered by role.\r\n */\r\nconst getUsersByRole = async (role) => {\r\n    const response = await axios.get(`/api/users/role/${role}`)\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n\r\n    return response\r\n}\r\n\r\n/**\r\n * Sends an api request to retrieve a user's projects.\r\n * @param {string} userId - The \"_id\" field of the requested user\r\n * @param {object} cancelToken - Axios cancel token.\r\n * @returns Server response containing list of projects where the user is in the team, the assigned dev, or submitter.\r\n */\r\nconst getUserProjects = async (userId, cancelToken) => {\r\n    const response = await axios.get(`/api/users/user/${userId}/projects`,{cancelToken: cancelToken})\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n\r\n    return response\r\n}\r\n\r\n/**\r\n * Sends an api request to return relevant tickets to the user.\r\n * @param {string} userId - The \"_id\" field of the user.\r\n * @param {object} cancelToken - Axios cancel token.\r\n * @returns Server response containing an array of the users tickets.\r\n */\r\nconst getUserTickets = async (userId, cancelToken) => {\r\n    const response = await axios.get(`/api/users/user/${userId}/tickets`, cancelToken)\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n\r\n    return response\r\n}\r\n\r\n/**\r\n * Sends an api request to get all users in the database.\r\n * @param cancelToken - Axios cancel token.\r\n * @returns Server response returning an array containing user objects of all users.\r\n */\r\nconst getAllUsers = async (cancelToken) => {\r\n    const response = await axios.get(`/api/users`, {cancelToken: cancelToken})\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n\r\n    return response\r\n}\r\n\r\n/**\r\n * Sends an api request to retrieve a user object.\r\n * @param {string} userId - The \"_id\" field of the user to retrieve.\r\n * @returns Server response containing the user object\r\n */\r\nconst getUser = async (userId) => {\r\n    const response = await axios.get(`/api/users/user/${userId}`)\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n    return response\r\n}\r\n\r\n/**\r\n * Send an api request that will update a user's values.\r\n * @param {string} userId - The \"_id\" field of the user to update\r\n * @param {object} userUpdates - Object containing new user values\r\n * @returns \r\n */\r\nconst updateUser = async (userId, userUpdates) => {\r\n    const response = await axios.patch(`/api/users/user/${userId}`, userUpdates)\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            throw err\r\n        })\r\n    return response\r\n}\r\n\r\n\r\n\r\nexport {\r\n    getUsersByRole,\r\n    getUserProjects,\r\n    getUserTickets,\r\n    getAllUsers,\r\n    getUser,\r\n    updateUser,\r\n}","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Typography } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    span: {\r\n        borderRadius: '3px',\r\n        backgroundColor: '#00adb5',\r\n        boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n        padding: '.4rem',\r\n\r\n    },\r\n}))\r\n\r\n\r\nconst HeaderLabel = ({ text }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <Typography variant='h3' component='span' className={classes.span}>\r\n           {text}\r\n        </Typography>\r\n    )\r\n}\r\n\r\nexport default HeaderLabel","import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { Typography } from '@material-ui/core'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n    },\r\n    hover: {\r\n        \"&:hover\": {\r\n            backgroundColor: \"#0899ba !important\"\r\n        }\r\n\r\n    },\r\n    selected: {\r\n        backgroundColor: \"#607d8b !important\"\r\n    },\r\n\r\n    span: {\r\n        padding: '1rem',\r\n    }\r\n})\r\n\r\nexport default function BasicTable({ loading, selected, handleSelect, title, data, hover, dense, rowKey, tableHeight, emptyTableText }) {\r\n\r\n    /**\r\n     * Handle cases where a table does not need a select function.\r\n     * Throw an error when key and height are not specified\r\n     */\r\n    if (!handleSelect) {\r\n        handleSelect = () => undefined\r\n    }\r\n    if (!rowKey) {\r\n        throw new Error('Component prop \"rowKey\" is not defined')\r\n    }\r\n    if (!tableHeight) {\r\n        throw new Error('Component prop \"tableHeight\" is not defined')\r\n    }\r\n\r\n    /**\r\n     * Styling\r\n     */\r\n    const classes = useStyles()\r\n\r\n    /**\r\n     * States used to manage the pages and rows displayed on a table\r\n     */\r\n    const [page, setPage] = useState(0)\r\n    const [rowsPerPage, setRowsPerPage] = useState(25)\r\n\r\n    /**\r\n     * Function to handle page changing in the table component.\r\n     * @param {object} event - Capture the event object\r\n     * @param {number} newPage - The number of the new page.\r\n     */\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    /**\r\n     * Modifies the table component to handle the requested rows per page\r\n     * @param {object} event - Capture the event object.\r\n     */\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value)\r\n        setPage(0)\r\n    }\r\n\r\n    /**\r\n     * Determines if the ID selected is the the ID of the current row.\r\n     * @param {string} rowId - The rowId to be compared to the selectedId\r\n     * @returns True if the selected objects Id matches the rowId\r\n     */\r\n    const isSelected = rowId => selected === rowId\r\n\r\n    /**\r\n     * Deep copy the table data and remove the \"_id\" field to avoid it being\r\n     * displayed in the table.\r\n     */\r\n    const rows = JSON.parse(JSON.stringify(data))\r\n\r\n    rows.forEach(row => delete row._id)\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <Typography variant='h4' component='span' className={classes.span}>\r\n                {title}\r\n            </Typography>\r\n            <TableContainer style={{ minHeight: tableHeight, maxHeight: tableHeight }}>\r\n                <Table\r\n                    className={classes.table}\r\n                    aria-label=\"simple table\"\r\n                    size={dense ? 'small' : 'medium'}\r\n                    components={{\r\n                    }}\r\n                >\r\n                    <TableHead>\r\n                        <TableRow>\r\n\r\n                            {/* Uses the first object in the array to create the table header */}\r\n                            {\r\n                                rows[0] &&\r\n                                Object.keys(rows[0]).map((key, index) => {\r\n                                    const titleCaseKey = key.charAt(0).toUpperCase() + key.slice(1)\r\n                                    if (index === 0) {\r\n                                        return <TableCell key={key + ' ' + index}>{titleCaseKey}</TableCell>\r\n                                    } else {\r\n                                        return <TableCell key={key + ' ' + index} align=\"center\">{titleCaseKey}</TableCell>\r\n                                    }\r\n\r\n                                })\r\n                            }\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n\r\n                        {/* Maps the data to the table */}\r\n                        {\r\n                            rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => (\r\n                                <TableRow\r\n                                    classes={{ hover: classes.hover, selected: classes.selected }}\r\n                                    hover={hover}\r\n                                    key={row[rowKey] + ' ' + index}\r\n                                    onClick={(event) => {\r\n                                        handleSelect(event, data[index]._id)\r\n                                    }}\r\n                                    selected={hover && isSelected(data[index]._id)}\r\n                                >\r\n                                    {\r\n                                        Object.keys(row).map((key, index) => {\r\n                                            if (index === 0) {\r\n                                                return <TableCell key={key + ' ' + index} component=\"th\" scope=\"row\">\r\n                                                    {row[key]}\r\n                                                </TableCell>\r\n                                            } else {\r\n                                                return <TableCell key={key + ' ' + index} align=\"center\">{row[key]}</TableCell>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </TableRow>\r\n                            ))\r\n                        }\r\n\r\n                        {/* Display spinner when data is loading */}\r\n                        {\r\n                            loading &&\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" style={{ border: 'none' }}>\r\n                                    <CircularProgress size='8.5rem' />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        }\r\n\r\n                        {/* Displays text when table is empty and not loading */}\r\n                        {\r\n                            (!rows.length && !loading) &&\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" style={{ border: 'none' }}>\r\n                                    <Typography variant='h4' className={classes.span}>\r\n                                        {emptyTableText}\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[5, 25, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper >\r\n    )\r\n}\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { Paper } from '@material-ui/core'\r\nimport Table from '../components/Table'\r\nimport { getAllUsers, updateUser } from '../apis/user-api'\r\nimport HeaderLabel from '../components/HeaderLabel'\r\nimport Box from '@material-ui/core/Box'\r\nimport { Typography } from '@material-ui/core'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport { Context } from '../global/Store'\r\nimport { snackbarPayload } from '../helpers/constants'\r\nimport { OPENSNACKBAR } from '../helpers/constants'\r\nimport axios from 'axios'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n\r\n    },\r\n    link: {\r\n        color: 'inherit',\r\n        textDecoration: 'none',\r\n    },\r\n    span: {\r\n        borderRadius: '3px',\r\n        backgroundColor: '#00adb5',\r\n        boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n        padding: '.4rem',\r\n\r\n    },\r\n    formControl: {\r\n        display: 'inline-block',\r\n        margin: theme.spacing(1),\r\n        minWidth: 100,\r\n    },\r\n    button: {\r\n\r\n    }\r\n}))\r\n\r\nconst AdminRoles = () => {\r\n    const classes = useStyles()\r\n\r\n    const [selectedUserId, setSelectedUserId] = useState('')\r\n    const [users, setAllUsers] = useState([])\r\n    const [usersLoading, setUsersLoading] = useState(false)\r\n    const [role, setRole] = useState('')\r\n    const [store, dispatch] = useContext(Context)\r\n\r\n\r\n    /**\r\n     * Retrieves all users and loads them into a table\r\n     */\r\n    useEffect(() => {\r\n        const source = axios.CancelToken.source()\r\n        setUsersLoading(true)\r\n        getAllUsers(source.token)\r\n            .then(res => {\r\n                setAllUsers(res.data.userList)\r\n                setUsersLoading(false)\r\n            })\r\n\r\n            return () => {\r\n                source.cancel()\r\n            }\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    /**\r\n     * Handles the selection of a user on the table.\r\n     * @param {object} event - Captures the event\r\n     * @param {string} id - The ID of the user to be selected\r\n     */\r\n    const handleSelectUser = (event, id) => {\r\n        if (selectedUserId === id) {\r\n            setSelectedUserId('')\r\n        } else {\r\n            setSelectedUserId(id)\r\n            const user = users.find(user => user._id === id)\r\n            setRole(user.role)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Captures the selected role vale and then sends an api request with the\r\n     * selected user to update the user's role.\r\n     * @param {object} event Captures the event\r\n     */\r\n    const handleRoleChange = (event) => {\r\n        const newRole = event.target.value\r\n        setRole(newRole)\r\n        updateUser(selectedUserId, { role: newRole })\r\n            .then(res => {\r\n                snackbarPayload.snackbarText = 'Successfully changed user role'\r\n                snackbarPayload.snackbarSeverity = 'success'\r\n                const user = users.find(user => user._id === selectedUserId)\r\n                user.role = newRole\r\n            })\r\n            .catch(err => {\r\n                snackbarPayload.snackbarText = 'Could not change users role. Try again later.'\r\n                snackbarPayload.snackbarSeverity = 'error'\r\n            })\r\n            .finally(() => {\r\n                dispatch({ type: OPENSNACKBAR, snackbarPayload: snackbarPayload })\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <HeaderLabel text='Manage User Roles' />\r\n                </Grid>\r\n                {\r\n                    store.isDemoUser &&\r\n                    <Grid item xs={12}>\r\n                        <Typography variant='h5'>\r\n                            Demo users are able to view roles but not change them.\r\n                    </Typography>\r\n                    </Grid>\r\n                }\r\n\r\n\r\n                <Grid item md={8} xs={12}>\r\n                    <Table\r\n                        emptyTableText='There are no users'\r\n                        tableHeight='70vh'\r\n                        loading={usersLoading}\r\n                        selected={selectedUserId}\r\n                        handleSelect={handleSelectUser}\r\n                        title='Users'\r\n                        data={users}\r\n                        hover={true}\r\n                        dense={false}\r\n                        rowKey='_id'\r\n                    />\r\n                </Grid>\r\n                <Grid item md={4} xs={12} spacing={2} style={{ textAlign: 'center' }}>\r\n                    <Box component={Paper} style={{ minHeight: '25vh' }}>\r\n                        <Typography variant='h5'>\r\n                            User role details for user:\r\n                        </Typography>\r\n                        <Typography variant='h5'>\r\n                            {selectedUserId ? users.find(user => user._id === selectedUserId).name : 'No user selected'}\r\n                        </Typography>\r\n                        <FormControl className={classes.formControl} style={{ width: \"80%\" }}>\r\n                            <InputLabel id=\"demo-simple-select-label\">Role</InputLabel>\r\n                            <Select\r\n                                disabled={(selectedUserId === '') || (store.isDemoUser)}\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={role}\r\n                                onChange={(e) => handleRoleChange(e)}\r\n                                fullWidth\r\n                            >\r\n                                <MenuItem value='Submitter'>Submitter</MenuItem>\r\n                                <MenuItem value='Developer'>Developer</MenuItem>\r\n                                <MenuItem value='Project Manager'>Project Manager</MenuItem>\r\n                                <MenuItem value='Admin'>Admin</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Box>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminRoles"],"sourceRoot":""}